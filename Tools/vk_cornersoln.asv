%% VK_CORNERSOLN Bound 
% This function attempts to find corner solutions that exactly fit the
% given function within the constraint set.
function [not_viable, min_control, exited] = vk_cornersoln(fn, ...
    constraint_set, min_control, allowed_vars, setup)
    
    zero_fn = setup.zero_fn;
        
    not_viable = false;
        
    exited = setup.exited_fn(fn(min_control), constraint_set);
    while (~isempty(exited))
        cnt = length(exited);
        
        % Consider the first element.
        i = exited(1);        
        
        % A zero value means nothing can be done.  A negative value means
        % the lower bound.
        if (i == 0)            
            not_viable = true;
            break;
        elseif (i < 0)
            f = @(u) vk_distance_fn(fn, u, ...
                constraint_set(abs(i)*2 - 1), abs(i));
        else
            f = @(u) vk_distance_fn(fn, u, ...
                constraint_set(i*2), i);
        end
        
        % We need the signs of the upper and lower values to be different;
        % otherwise, we shouldn't use fzero.
        if (sign(f(allowed_vars(1))) ~= sign(f(allowed_vars(2))))
            min_control = zero_fn(f, allowed_vars);
        else
            not_viable = true;
            break;
        end
        
        % Check the sign of our new control, and shrink the allowed bounds
        % accordingly.    
        if (sign(min_control) == 0)
            % This isn't quite correct, but we are unable to work out
            % whether zero is a lower or upper bound.
            allowed_vars = [0,0];  
        elseif (sign(min_control) == -1)
            allowed_vars(1) = min_control;
        else % positive
            allowed_vars(2) = min_control;
        end
        
        % Find what has exited now.  
        exited = setup.exited_fn(fn(min_control), constraint_set);
        
        % If the number of things exiting doesn't shrink, then give up.
        % Otherwise, do the loop again.
        if (length(exited) >= cnt)
            not_viable = true;
            break;
        end
    end