fprintf('TESTING CONSISTENCY OF VK_VIABLE AND VK_SIMULATE_EULER...\n');
fprintf('=========================================================\n\n');
fprintf('This test will load the disc=51 3D kernel and test the outcome of\n');
fprintf('viability-testing that point against the results of a\n');
fprintf('stop-when-steady Euler simulation.\n');

%% Goto vk root and setup path
cd ../;
addpath Tools ControlAlgs VControlAlgs;


%% Load viability kernel data.
load('Projects/3D_closed_economy_disc=51,tol=0.0001.mat');


%% Settings
% Position to test.
posn = sim_start

% control algorithm.
control_fn = @vk_control_minin1


%% Make the delta_fn -- cut-pasted from vk_4dgui

% Arguments
args = mat2cell(symbols,ones(1,size(symbols,1)),size(symbols,2));

% Create inline functions for the differential equations.
diff_eqn_strs = diff_eqn;

diff_eqns = cell(size(diff_eqn_strs,1), 1);
for i = 1:size(diff_eqn_strs,1)
    diff_eqns{i} = inline(diff_eqn_strs(i,:), args{:}, controlsymbol);
end

delta_fn = @(x,u) vk_delta_fn(diff_eqns, x, u);


%% Make options -- cut-pasted from vk_4dgui
options = vk_options(constraint_set, delta_fn, controlmax, ...
    'debug', 0, ...
    'steps', 1, ...
    'control_fn', control_fn, ...
    'controlsymbol', controlsymbol, ...
    'discretisation', discretisation, ...
    'numvars', numvars, ...
    'controltolerance', controltolerance, ...
    'sim_fn', @vk_simulate_euler, ...
    'sim_stopsteady', 1, ...
    'stoppingtolerance', stoppingtolerance, ...
    'timediscretisation', timediscretisation ...  
    );

%% Run the viability algorithm
fprintf('Testing vk_viable algorithm ...\n');
fprintf('-------------------------------\n\n');
[viable, paths] = vk_viable(posn, constraint_set, delta_fn, controlmax, options);

viable_path = paths.posn_path;
viable_controlpath = transpose(paths.control_path);

fprintf('Point is viable: %i\n', viable);

fprintf('Path taken (sequence of column vectors):\n');
viable_path

fprintf('Controls applied (row of integers):\n');
viable_controlpath


%% Setup distances -- copied from vk_4dgui
% This array gives the distance between points, in each direction.
distances = zeros(1, length(constraint_set)/2);
for i = 1:length(constraint_set)/2
    distances(i) = (constraint_set(2*i) - constraint_set(2*i - 1)) ...
        / (discretisation-1);
end


%% Run the simulation
fprintf('Testing vk_simulate_euler algorithm...\n');
fprintf('--------------------------------------\n\n');
[~, sim_path, sim_normpath, sim_controlpath, ~] = vk_simulate_euler(...
    posn, sim_iterations, control_fn, V, distances, layers, constraint_set, ...
    delta_fn, controlmax, options);

fprintf('Path taken (sequence of column vectors):\n');
sim_path

fprintf('Controls applied (row of integers):\n');
sim_controlpath

fprintf('Norm value at each step (row of integers):\n');
sim_normpath

%% Test equality of results
fprintf('Testing equality of results...\n');

fprintf('If all positions are the same, you should see a row of 1''s:\n');
all(sim_path == viable_path)

fprintf('All controls are the same: %i\n', all(sim_controlpath == viable_controlpath));

if (all(all(sim_path == viable_path)) && all(sim_controlpath == viable_controlpath))
    frpp
end