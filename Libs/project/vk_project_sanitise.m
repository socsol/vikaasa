%% VK_4DGUI_PROJECT_SANITISE Set default values for the project, if missing
%
% See also: VIKAASA, CLI, GUI
function project = vk_project_sanitise(project)
    %% Check if the project has any mis-named elements
    rename = struct(...
        'constraint_set', 'K', ...
        'diff_eqn', 'diff_eqns', ...
        'controlmax', 'c');

    fn = fieldnames(rename);
    for i = 1:size(fn, 1);
        if (isfield(project, fn{i}))
            project.(rename.(fn{i})) = project.(fn{i});
            project = rmfield(project, fn{i});
        end
    end

    %% Set numvars
    % Check if the project is missing a 'numvars' element.  If it is, then it
    % should contain 'vardata' instead.  If neither is present, assume that
    % 'numvars' is 2.
    if (~isfield(project, 'numvars'))
        if (isfield(project, 'vardata'))
            project.numvars = size(project.vardata, 1);
        else
            project.numvars = 2;
        end
    end

    numvars = project.numvars;

    %% Check that 'discretisation' is not length one.  If it is, repeat it.
    if (isfield(project, 'discretisation') ...
      && numvars > 1 ...
      && length(project.discretisation) == 1)
        project.discretisation = project.discretisation*ones(numvars, 1);
    end

    %% Check that 'symbols', 'labels' and 'diff_eqns' are cell arrays.
    %   Otherwise, call cellstr on them to convert.  Note that we always keep
    %   them in column form.
    cellarrs = {'symbols', 'labels', 'diff_eqns'};
    for i = 1:length(cellarrs)
        if (isfield(project, cellarrs{i}) && ~iscell(project.(cellarrs{i})))
            project.(cellarrs{i}) = cellstr(project.(cellarrs{i}));
        end
    end

    %% Check that the variable-length arguments are the correct size.
    %   If they aren't, chop/extend them.  All in column form.
    varlength = {'discretisation', 'symbols', 'labels', 'diff_eqns', 'sim_start'};
    for i = 1:length(varlength)
        if (isfield(project, varlength{i}) ...
          && length(project.(varlength{i})) ~= numvars)
            v = project.(varlength{i});
            usevars = min(numvars, length(v));
            padvars = max(0, numvars - length(v));
            if (iscell(v))
                project.(varlength{i}) = [v(1:usevars), cell(padvars, 1)];
            else
                project.(varlength{i}) = [v(1:usevars), zeros(padvars, 1)];
            end
        end
    end

    %% Check the constraint set is the right size.
    %   It needs to be of length 2*numvars.  It is kept in row form.
    if (isfield(project, 'K') && length(project.K) ~= 2*numvars)
        usevars = min(2*numvars, length(project.K));
        padvars = max(0, 2*numvars - length(project.K));
        
        project.K = [project.K(1:usevars), zeros(1, padvars)];
    end

    project_default = struct(...
        'alpha', 0.9, ...
        'autosave', 0, ...
        'controlalg', 'ZeroControl', ...
        'controldefault', 0, ...
        'c', 0.005, ...
        'controlbounded', 0, ...
        'controlenforce', 0, ...
        'controlsymbol', 'u', ...
        'controltolerance', 1e-3, ...
        'custom_cost_fn', '', ...
        'custom_constraint_set_fn', '', ...
        'debug', 0, ...
        'diff_eqns', {cell(numvars, 1)}, ...
        'discretisation', 11*ones(numvars, 1), ...
        'drawbox', 0, ...
        'holdfig', 0, ...
        'K', zeros(1, 2*numvars), ...
        'labels', {cell(numvars, 1)}, ...
        'layers', 1, ...
        'numvars', 2, ...
        'parallel_processors', 2, ...
        'plotcolour', [1 1 0], ...
        'plottingmethod', 'qhull', ...
        'progressbar', 1, ...
        'sim_controlalg', 'ZeroControl', ...
        'sim_iterations', 10, ...
        'sim_line_colour', [0 0 1], ...
        'sim_line_width', 2, ...
        'sim_method', 'ode', ...
        'sim_use_nearest', 0, ...
        'sim_showpoints', 0, ...
        'sim_start', zeros(numvars, 1), ...
        'sim_stopsteady', 0, ...
        'slices', [], ...
        'steps', 1, ...
        'stoppingtolerance', 1e-3, ...
        'symbols', {cell(numvars, 1)}, ...
        'timediscretisation', 1, ...
        'use_controldefault', 0, ...
        'use_custom_cost_fn', 0, ...
        'use_custom_constraint_set_fn', 0, ...
        'use_parallel', 0 ...
    );

    %% Add any fields that are missing.
    dfn = fieldnames(project_default);
    for i = 1:length(dfn)
        if (~isfield(project, dfn{i}))
            project.(dfn{i}) = project_default.(dfn{i});
        end
    end
end
